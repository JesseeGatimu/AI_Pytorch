import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms

!pip install kagglehub
import kagglehub
path = kagglehub.dataset_download("paultimothymooney/chest-xray-pneumonia")
print("Dataset downloaded to:", path)

train_dir = path + "/chest_xray/train"
val_dir   = path + "/chest_xray/val"
test_dir  = path + "/chest_xray/test"

transform=transforms.Compose([
    transforms.Grayscale(num_output_channels=1),
    transforms.Resize((128,128)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.5,),(0.5,))
])
train_dataset=torchvision.datasets.ImageFolder(train_dir,transform=transform)
val_dataset=torchvision.datasets.ImageFolder(val_dir,transform=transform)
test_dataset=torchvision.datasets.ImageFolder(test_dir,transform=transform)

class_counts = [0] * len(train_dataset.classes)
for _, label in train_dataset.samples:
    class_counts[label] += 1

class_weights = 1. / torch.tensor(class_counts, dtype=torch.float)
sample_weights = [class_weights[label] for _, label in train_dataset.samples]
sampler = torch.utils.data.WeightedRandomSampler(sample_weights, num_samples=len(sample_weights), replacement=True)

train_loader=torch.utils.data.DataLoader(train_dataset,batch_size=32,sampler=sampler)
val_loader=torch.utils.data.DataLoader(val_dataset,batch_size=32,shuffle=False)
test_loader=torch.utils.data.DataLoader(test_dataset,batch_size=32,shuffle=False)

class PneumoniaCNN(nn.Module):
  def __init__(self):
    super(PneumoniaCNN,self).__init__()
    self.conv1=nn.Conv2d(1,32,kernel_size=3,stride=1,padding=1)
    self.pool=nn.MaxPool2d(2,2)
    self.conv2=nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
    self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
    self.relu=nn.ReLU()
    self.fc1=nn.Linear(128*16*16,256)
    self.fc2=nn.Linear(256,2)
    self.dropout=nn.Dropout(0.5)

  def forward(self,x):
    x=self.pool(self.relu(self.conv1(x)))
    x=self.pool(self.relu(self.conv2(x)))
    x=self.pool(self.relu(self.conv3(x)))
    x=x.view(-1,128*16*16)
    x=self.relu(self.fc1(x))
    x=self.dropout(x)
    x=self.fc2(x)
    return x

model=PneumoniaCNN()
criterion=nn.CrossEntropyLoss()
optimizer=torch.optim.Adam(model.parameters(),lr=0.001)
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)
epochs=10
for epoch in range(epochs):
    # Training
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0
    for images, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    train_acc = 100 * correct / total

    # Validation
    model.eval()
    val_loss = 0.0
    val_correct = 0
    val_total = 0
    with torch.no_grad():
        for images, labels in val_loader:
            outputs = model(images)
            loss = criterion(outputs, labels)
            val_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            val_total += labels.size(0)
            val_correct += (predicted == labels).sum().item()

    val_acc = 100 * val_correct / val_total
    scheduler.step()

    print(f"Epoch [{epoch+1}/{epochs}] "
          f"Train Loss: {running_loss:.2f}, Train Acc: {train_acc:.2f}% "
          f"Val Loss: {val_loss:.2f}, Val Acc: {val_acc:.2f}%")

model.eval()
correct=0
total=0
with torch.no_grad():
  for images, labels in test_loader:
    outputs=model(images)
    _, predicted=torch.max(outputs,1)
    total+=labels.size(0)
    correct+=(predicted==labels).sum().item()
print(f"Accuracy : {100*correct/total:.2f}%")
